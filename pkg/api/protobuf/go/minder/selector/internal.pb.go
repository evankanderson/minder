// SPDX-FileCopyrightText: Copyright 2024 The Minder Authors
// SPDX-License-Identifier: Apache-2.0

// This file contains definitions for selector data used by the CEL
// engine for filtering.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: minder/selector/internal.proto

// buf:lint:ignore PACKAGE_VERSION_SUFFIX

package selector

import (
	v1 "github.com/mindersec/minder/pkg/api/protobuf/go/minder/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// #### internal/providers and test
// Used for CEL filtering
type SelectorProvider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the name of the provider, e.g. github-app-jakubtestorg
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the class of the provider, e.g. github-app
	Class         string `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectorProvider) Reset() {
	*x = SelectorProvider{}
	mi := &file_minder_selector_internal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectorProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectorProvider) ProtoMessage() {}

func (x *SelectorProvider) ProtoReflect() protoreflect.Message {
	mi := &file_minder_selector_internal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectorProvider.ProtoReflect.Descriptor instead.
func (*SelectorProvider) Descriptor() ([]byte, []int) {
	return file_minder_selector_internal_proto_rawDescGZIP(), []int{0}
}

func (x *SelectorProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SelectorProvider) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

type SelectorRepository struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the full name of the repository, e.g. mindersec/minder
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the provider of the repository
	Provider *SelectorProvider `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// is_fork is true if the repository is a fork, nil if "don't know" or rather
	// not applicable to this provider
	IsFork *bool `protobuf:"varint,3,opt,name=is_fork,json=isFork,proto3,oneof" json:"is_fork,omitempty"`
	// is_private is true if the repository is private, nil if "don't know" or rather
	// not applicable to this provider
	IsPrivate     *bool            `protobuf:"varint,4,opt,name=is_private,json=isPrivate,proto3,oneof" json:"is_private,omitempty"`
	Properties    *structpb.Struct `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectorRepository) Reset() {
	*x = SelectorRepository{}
	mi := &file_minder_selector_internal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectorRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectorRepository) ProtoMessage() {}

func (x *SelectorRepository) ProtoReflect() protoreflect.Message {
	mi := &file_minder_selector_internal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectorRepository.ProtoReflect.Descriptor instead.
func (*SelectorRepository) Descriptor() ([]byte, []int) {
	return file_minder_selector_internal_proto_rawDescGZIP(), []int{1}
}

func (x *SelectorRepository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SelectorRepository) GetProvider() *SelectorProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *SelectorRepository) GetIsFork() bool {
	if x != nil && x.IsFork != nil {
		return *x.IsFork
	}
	return false
}

func (x *SelectorRepository) GetIsPrivate() bool {
	if x != nil && x.IsPrivate != nil {
		return *x.IsPrivate
	}
	return false
}

func (x *SelectorRepository) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type SelectorArtifact struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the full name of the artifact, e.g. mindersec/minder-server
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the provider of the artifact
	Provider *SelectorProvider `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// the type of the artifact, e.g. "container"
	Type          string           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Properties    *structpb.Struct `protobuf:"bytes,5,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectorArtifact) Reset() {
	*x = SelectorArtifact{}
	mi := &file_minder_selector_internal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectorArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectorArtifact) ProtoMessage() {}

func (x *SelectorArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_minder_selector_internal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectorArtifact.ProtoReflect.Descriptor instead.
func (*SelectorArtifact) Descriptor() ([]byte, []int) {
	return file_minder_selector_internal_proto_rawDescGZIP(), []int{2}
}

func (x *SelectorArtifact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SelectorArtifact) GetProvider() *SelectorProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *SelectorArtifact) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SelectorArtifact) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type SelectorPullRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the full name of the pr, e.g. mindersec/minder-server/123
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the provider of the pull request
	Provider *SelectorProvider `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	// provider-specific properties
	Properties    *structpb.Struct `protobuf:"bytes,2,opt,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectorPullRequest) Reset() {
	*x = SelectorPullRequest{}
	mi := &file_minder_selector_internal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectorPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectorPullRequest) ProtoMessage() {}

func (x *SelectorPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_minder_selector_internal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectorPullRequest.ProtoReflect.Descriptor instead.
func (*SelectorPullRequest) Descriptor() ([]byte, []int) {
	return file_minder_selector_internal_proto_rawDescGZIP(), []int{3}
}

func (x *SelectorPullRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SelectorPullRequest) GetProvider() *SelectorProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *SelectorPullRequest) GetProperties() *structpb.Struct {
	if x != nil {
		return x.Properties
	}
	return nil
}

type SelectorEntity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// one of repository, pull_request, artifact (see oneof entity)
	EntityType v1.Entity `protobuf:"varint,1,opt,name=entity_type,json=entityType,proto3,enum=minder.v1.Entity" json:"entity_type,omitempty"`
	// the name of the entity, same as the name in the entity message
	Name     string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Provider *SelectorProvider `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	// Types that are valid to be assigned to Entity:
	//
	//	*SelectorEntity_Repository
	//	*SelectorEntity_Artifact
	//	*SelectorEntity_PullRequest
	Entity        isSelectorEntity_Entity `protobuf_oneof:"entity"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SelectorEntity) Reset() {
	*x = SelectorEntity{}
	mi := &file_minder_selector_internal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SelectorEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectorEntity) ProtoMessage() {}

func (x *SelectorEntity) ProtoReflect() protoreflect.Message {
	mi := &file_minder_selector_internal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectorEntity.ProtoReflect.Descriptor instead.
func (*SelectorEntity) Descriptor() ([]byte, []int) {
	return file_minder_selector_internal_proto_rawDescGZIP(), []int{4}
}

func (x *SelectorEntity) GetEntityType() v1.Entity {
	if x != nil {
		return x.EntityType
	}
	return v1.Entity(0)
}

func (x *SelectorEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SelectorEntity) GetProvider() *SelectorProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *SelectorEntity) GetEntity() isSelectorEntity_Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *SelectorEntity) GetRepository() *SelectorRepository {
	if x != nil {
		if x, ok := x.Entity.(*SelectorEntity_Repository); ok {
			return x.Repository
		}
	}
	return nil
}

func (x *SelectorEntity) GetArtifact() *SelectorArtifact {
	if x != nil {
		if x, ok := x.Entity.(*SelectorEntity_Artifact); ok {
			return x.Artifact
		}
	}
	return nil
}

func (x *SelectorEntity) GetPullRequest() *SelectorPullRequest {
	if x != nil {
		if x, ok := x.Entity.(*SelectorEntity_PullRequest); ok {
			return x.PullRequest
		}
	}
	return nil
}

type isSelectorEntity_Entity interface {
	isSelectorEntity_Entity()
}

type SelectorEntity_Repository struct {
	Repository *SelectorRepository `protobuf:"bytes,4,opt,name=repository,proto3,oneof"`
}

type SelectorEntity_Artifact struct {
	Artifact *SelectorArtifact `protobuf:"bytes,5,opt,name=artifact,proto3,oneof"`
}

type SelectorEntity_PullRequest struct {
	PullRequest *SelectorPullRequest `protobuf:"bytes,6,opt,name=pull_request,json=pullRequest,proto3,oneof"`
}

func (*SelectorEntity_Repository) isSelectorEntity_Entity() {}

func (*SelectorEntity_Artifact) isSelectorEntity_Entity() {}

func (*SelectorEntity_PullRequest) isSelectorEntity_Entity() {}

var File_minder_selector_internal_proto protoreflect.FileDescriptor

const file_minder_selector_internal_proto_rawDesc = "" +
	"\n" +
	"\x1eminder/selector/internal.proto\x12\bselector\x1a\x16minder/v1/minder.proto\x1a\x1cgoogle/protobuf/struct.proto\"<\n" +
	"\x10SelectorProvider\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05class\x18\x02 \x01(\tR\x05class\"\xf6\x01\n" +
	"\x12SelectorRepository\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x126\n" +
	"\bprovider\x18\x02 \x01(\v2\x1a.selector.SelectorProviderR\bprovider\x12\x1c\n" +
	"\ais_fork\x18\x03 \x01(\bH\x00R\x06isFork\x88\x01\x01\x12\"\n" +
	"\n" +
	"is_private\x18\x04 \x01(\bH\x01R\tisPrivate\x88\x01\x01\x127\n" +
	"\n" +
	"properties\x18\x05 \x01(\v2\x17.google.protobuf.StructR\n" +
	"propertiesB\n" +
	"\n" +
	"\b_is_forkB\r\n" +
	"\v_is_private\"\xab\x01\n" +
	"\x10SelectorArtifact\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x126\n" +
	"\bprovider\x18\x02 \x01(\v2\x1a.selector.SelectorProviderR\bprovider\x12\x12\n" +
	"\x04type\x18\x04 \x01(\tR\x04type\x127\n" +
	"\n" +
	"properties\x18\x05 \x01(\v2\x17.google.protobuf.StructR\n" +
	"properties\"\x9a\x01\n" +
	"\x13SelectorPullRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x126\n" +
	"\bprovider\x18\x03 \x01(\v2\x1a.selector.SelectorProviderR\bprovider\x127\n" +
	"\n" +
	"properties\x18\x02 \x01(\v2\x17.google.protobuf.StructR\n" +
	"properties\"\xd8\x02\n" +
	"\x0eSelectorEntity\x122\n" +
	"\ventity_type\x18\x01 \x01(\x0e2\x11.minder.v1.EntityR\n" +
	"entityType\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x126\n" +
	"\bprovider\x18\x03 \x01(\v2\x1a.selector.SelectorProviderR\bprovider\x12>\n" +
	"\n" +
	"repository\x18\x04 \x01(\v2\x1c.selector.SelectorRepositoryH\x00R\n" +
	"repository\x128\n" +
	"\bartifact\x18\x05 \x01(\v2\x1a.selector.SelectorArtifactH\x00R\bartifact\x12B\n" +
	"\fpull_request\x18\x06 \x01(\v2\x1d.selector.SelectorPullRequestH\x00R\vpullRequestB\b\n" +
	"\x06entityBAZ?github.com/mindersec/minder/pkg/api/protobuf/go/minder/selectorb\x06proto3"

var (
	file_minder_selector_internal_proto_rawDescOnce sync.Once
	file_minder_selector_internal_proto_rawDescData []byte
)

func file_minder_selector_internal_proto_rawDescGZIP() []byte {
	file_minder_selector_internal_proto_rawDescOnce.Do(func() {
		file_minder_selector_internal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_minder_selector_internal_proto_rawDesc), len(file_minder_selector_internal_proto_rawDesc)))
	})
	return file_minder_selector_internal_proto_rawDescData
}

var file_minder_selector_internal_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_minder_selector_internal_proto_goTypes = []any{
	(*SelectorProvider)(nil),    // 0: selector.SelectorProvider
	(*SelectorRepository)(nil),  // 1: selector.SelectorRepository
	(*SelectorArtifact)(nil),    // 2: selector.SelectorArtifact
	(*SelectorPullRequest)(nil), // 3: selector.SelectorPullRequest
	(*SelectorEntity)(nil),      // 4: selector.SelectorEntity
	(*structpb.Struct)(nil),     // 5: google.protobuf.Struct
	(v1.Entity)(0),              // 6: minder.v1.Entity
}
var file_minder_selector_internal_proto_depIdxs = []int32{
	0,  // 0: selector.SelectorRepository.provider:type_name -> selector.SelectorProvider
	5,  // 1: selector.SelectorRepository.properties:type_name -> google.protobuf.Struct
	0,  // 2: selector.SelectorArtifact.provider:type_name -> selector.SelectorProvider
	5,  // 3: selector.SelectorArtifact.properties:type_name -> google.protobuf.Struct
	0,  // 4: selector.SelectorPullRequest.provider:type_name -> selector.SelectorProvider
	5,  // 5: selector.SelectorPullRequest.properties:type_name -> google.protobuf.Struct
	6,  // 6: selector.SelectorEntity.entity_type:type_name -> minder.v1.Entity
	0,  // 7: selector.SelectorEntity.provider:type_name -> selector.SelectorProvider
	1,  // 8: selector.SelectorEntity.repository:type_name -> selector.SelectorRepository
	2,  // 9: selector.SelectorEntity.artifact:type_name -> selector.SelectorArtifact
	3,  // 10: selector.SelectorEntity.pull_request:type_name -> selector.SelectorPullRequest
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_minder_selector_internal_proto_init() }
func file_minder_selector_internal_proto_init() {
	if File_minder_selector_internal_proto != nil {
		return
	}
	file_minder_selector_internal_proto_msgTypes[1].OneofWrappers = []any{}
	file_minder_selector_internal_proto_msgTypes[4].OneofWrappers = []any{
		(*SelectorEntity_Repository)(nil),
		(*SelectorEntity_Artifact)(nil),
		(*SelectorEntity_PullRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_minder_selector_internal_proto_rawDesc), len(file_minder_selector_internal_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_minder_selector_internal_proto_goTypes,
		DependencyIndexes: file_minder_selector_internal_proto_depIdxs,
		MessageInfos:      file_minder_selector_internal_proto_msgTypes,
	}.Build()
	File_minder_selector_internal_proto = out.File
	file_minder_selector_internal_proto_goTypes = nil
	file_minder_selector_internal_proto_depIdxs = nil
}
